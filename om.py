#!/usr/bin/env python3
import os
import sys
from dotenv import load_dotenv
from outline_vpn.outline_vpn import OutlineVPN, OutlineServerErrorException
from colorama import Fore, Style, init, Back
import dict_file
import db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config_path = "/usr/local/bin/config.env"
load_dotenv(config_path)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
CENTOS_API_URL = os.getenv("CENTOS_API_URL")
CENTOS_CERT_SHA256 = os.getenv("CENTOS_CERT_SHA256")
UBUNTU_API_URL = os.getenv("UBUNTU_API_URL")
UBUNTU_CERT_SHA256 = os.getenv("UBUNTU_CERT_SHA256")

# –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
help_descriptions = dict_file.help_descriptions
def server_name_style(server_name):
    if server_name == 'c':
        host = 'vdsina.com'
        server_os = 'CentOS 7'
    elif server_name == 'u':
        host = 'timeweb.cloud'
        server_os = 'Ubuntu 24'
    else:
        host = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        server_os = 'N/A'
    print(f"{Back.BLACK}{Fore.WHITE}{host} -- {server_os}")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OutlineVPN –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def init_outline_manager(server_name):
    if server_name == 'u':
        return OutlineVPN(api_url=UBUNTU_API_URL, cert_sha256=UBUNTU_CERT_SHA256)
    elif server_name == 'c':
        return OutlineVPN(api_url=CENTOS_API_URL, cert_sha256=CENTOS_CERT_SHA256)
    else:
        print(f"{Fore.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {Fore.LIGHTWHITE_EX}{server_name}")
        sys.exit(1)

# –£—Ç–∏–ª–∏—Ç—ã
def bytes_to_gb(bytes_val):
    return bytes_val / (1024 ** 3) if isinstance(bytes_val, int) else 0

def user_info(id):
    user = db.get_user_by_username(id)
    username = f"{Style.BRIGHT}{Fore.CYAN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Fore.LIGHTWHITE_EX}{user[2]} {user[3]}\n"
    start_subscription = db.human_readable_date(user[4])
    end_subscription = db.human_readable_date(user[5])
    subscription = f"{Style.BRIGHT}{Fore.CYAN}–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏: {Fore.BLUE}{start_subscription} : {end_subscription}"

    print(username + subscription)
    print(f"{Style.BRIGHT}{Fore.CYAN}–ö–ª—é—á –≤ –ë–î: {Fore.GREEN}{user[6]}")


def all_keys():
    return outline_manager.get_keys()

def client_info(key):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—é—á–µ"""
    if db.user_exists(key.key_id):
        user_info(key.key_id)
    else:
        print(f"{Style.BRIGHT}{Fore.RED}–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á")

    print(f"{Style.BRIGHT}{Fore.CYAN}ID –∫–ª—é—á–∞: {Fore.LIGHTWHITE_EX}{key.key_id}")
    print(f"{Style.BRIGHT}{Fore.CYAN}–ò–º—è –∫–ª—é—á–∞: {Fore.LIGHTWHITE_EX}{key.name}")
    print(f"{Style.BRIGHT}{Fore.CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {Fore.BLUE}{bytes_to_gb(key.used_bytes):.2f} GB")
    print(f"{Style.BRIGHT}{Fore.CYAN}–ö–ª—é—á: {Fore.GREEN}{key.access_url}")

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
def list_keys(server_name):
    server_name_style(server_name)
    print(f"{Style.BRIGHT}{Fore.BLUE}-- –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π --")
    for key in all_keys():
        client_info(key)
        print(f"{Fore.LIGHTBLACK_EX}{'-'*80}")

def inspect_key(server_name):
    server_name_style(server_name)
    try:
        key_id = input(f"{Style.BRIGHT + Fore.CYAN}ID –ö–ª—é—á–∞: {Fore.WHITE}")
        print()
        key = outline_manager.get_key(key_id)
        client_info(key)
    except OutlineServerErrorException:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {Fore.LIGHTWHITE_EX}–ö–ª—é—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

def create_new_key(server_name):
    server_name_style(server_name)
    print(f"{Style.BRIGHT}{Fore.BLUE}-- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ --")
    name = input(f"{Fore.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞: {Fore.YELLOW}")
    key_id = input(f"{Fore.CYAN}–í–≤–µ–¥–∏—Ç–µ ID –∫–ª—é—á–∞: {Fore.YELLOW}")
    key = outline_manager.create_key(key_id=key_id, name=name)
    print(f"{Fore.GREEN}‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω! –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {Style.BRIGHT}{key.access_url+'#@vpnyt_bot'}")
    #client_info(name)

def delete_key(server_name):
    server_name_style(server_name)
    print(f"{Style.BRIGHT}{Fore.RED}-- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ --")
    key_id = input(f"{Fore.CYAN}–í–≤–µ–¥–∏—Ç–µ ID –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {Fore.YELLOW}")
    outline_manager.delete_key(key_id)
    print(f"{Fore.GREEN}üóëÔ∏è –ö–ª—é—á {key_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

def get_service_info(server_name):
    server_name_style(server_name)
    info = outline_manager.get_server_information()
    print(f"{Fore.LIGHTWHITE_EX}{info}")

def total_consumption_list(server_name):
    server_name_style(server_name)
    print(f"{Fore.LIGHTBLACK_EX}{'-' * 61}")
    print(f"{Style.BRIGHT}{Fore.LIGHTCYAN_EX}{'–ò–º—è –∫–ª—é—á–∞':<18} {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (GB)':>20} {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (–±–∞–π—Ç)':>20}")
    print(f"{Fore.LIGHTBLACK_EX}{'-' * 61}")
    for key in all_keys():
        used = int(key.used_bytes) if key.used_bytes is not None else 0
        gb = bytes_to_gb(used)
        print(f"{Fore.LIGHTWHITE_EX}{key.name:<18} {gb:>20.4f} {used:>20,}")
    print(f"{Fore.LIGHTBLACK_EX}{'-' * 61}")

def total_consumption_sum(server_name):
    server_name_style(server_name)
    summ = sum(int(k.used_bytes or 0) for k in all_keys())
    print(f"{Style.BRIGHT}{Fore.LIGHTCYAN_EX}–ò—Ç–æ–≥–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {Fore.LIGHTWHITE_EX}{bytes_to_gb(summ):.2f} GB")

def total_consumption_all(server_name):
    total_consumption_list(server_name)
    total_consumption_sum(server_name)

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
dictionary_commands = {
    'lk': list_keys,
    'ki': inspect_key,
    'ck': create_new_key,
    'dk': delete_key,
    'info': get_service_info,
    'tc': total_consumption_all,
    'tc-list': total_consumption_list,
    'tc-sum': total_consumption_sum
}
available_commands = ", ".join(dictionary_commands.keys())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main(func_name, server_name):
    if func_name in dictionary_commands:
        dictionary_commands[func_name](server_name)
    else:
        print(f"{Fore.RED}‚ùå –ö–æ–º–∞–Ω–¥–∞ '{func_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {Fore.LIGHTWHITE_EX}{available_commands}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    if '--help' in sys.argv or '-h' in sys.argv:
        print(f"{Fore.CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {Fore.LIGHTWHITE_EX}om [c|u] [–∫–æ–º–∞–Ω–¥–∞]")
        print(f"{Fore.CYAN}c - CentOS 7 —Å–µ—Ä–≤–µ—Ä (vdsina.com)")
        print(f"{Fore.CYAN}u - Ubuntu 24 —Å–µ—Ä–≤–µ—Ä (timeweb.cloud)")
        print(f"\n{Fore.CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n")
        for cmd, desc in help_descriptions.items():
            print(f"  {Fore.YELLOW}{cmd:<10} {Fore.RESET}{desc}")
        sys.exit(0)

    if len(sys.argv) < 3:
        print(f"{Fore.RED}‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {Fore.LIGHTWHITE_EX}om [c|u] [–∫–æ–º–∞–Ω–¥–∞]")
        sys.exit(1)

    server_name = sys.argv[1]
    func_name = sys.argv[2]

    outline_manager = init_outline_manager(server_name)
    main(func_name, server_name)
